#Hay en municipios en los que no ha habido matrimonios del mismo sexo, así que al unir las columnas aparece NA. Cambiamos esto por 0
datosmunicipios$HMS[is.na(datosmunicipios$HMS)]<-0
datosmunicipios$MMS[is.na(datosmunicipios$MMS)]<-0
#Leemos ahora con la función read.xlsx el archivo de Excel con la corrspondencia de los datos del municipio y
correspmunicipios<-read.xlsx("CodigosMunicipios.xlsx")
correspmunicipios<-correspmunicipios%>%transmute(CMUMA=CMUMA,CPROMA=CPROMA,Municipio=Nombre)
datosmunicipios<-merge(datosmunicipios,correspmunicipios)
#Ahora que ya hemos recogido los datos de muncicipios, sustituimos los códigos de provincia. Utilizamos para esto la función revalue.
CP=c("01" = "Álava", "02" = "Albacete", "03" = "Alicante", "04" = "Almería", "05" = "Ávila", "06" = "Badajoz", "07" = "Islas Baleares", "08" = "Barcelona", "09" = "Burgos", "10" = "Cáceres", "11" = "Cádiz", "12" = "Castellón", "13" = "Ciudad Real", "14" = "Córdoba", "15" = "La Coruña", "16" = "Cuenca", "17" = "Gerona", "18" = "Granada", "19" = "Guadalajara", "20" = "Guipúzcoa", "21" = "Huelva", "22" = "Huesca", "23" = "Jaén", "24" = "León", "25" = "Lérida", "26" = "La Rioja", "27" = "Lugo", "28" = "Madrid", "29" = "Málaga", "30" = "Murcia", "31" = "Navarra", "32" = "Orense", "33" = "Asturias", "34" = "Palencia", "35" = "Las Palmas", "36" = "Pontevedra", "37" = "Salamanca", "38" = "Santa Cruz de Tenerife", "39" = "Cantabria", "40" = "Segovia", "41" = "Sevilla", "42" = "Soria", "43" = "Tarragona", "44" = "Teruel", "45" = "Toledo", "46" = "Valencia", "47" = "Valladolid", "48" = "Vizcaya", "49" = "Zamora", "50" = "Zaragoza", "51" = "Ceuta", "52" = "Melilla", "66" = "Extranjero")
datostotal<-datostotal%>% mutate("CPROI"=revalue(CPROI,CP),"CPROMA"=revalue(CPROMA,CP),"CPRONCA"=revalue(CPRONCA,CP),"CPRONCB"=revalue(CPRONCB,CP))
#Filtramos por tipo de matrimonio
datosDS<-datostotal%>% filter(SEXOCA==1,SEXOCB==6)
datosHMS<-datostotal%>% filter(SEXOCA==1,SEXOCB==1)
datosMMS<-datostotal%>% filter(SEXOCA==6,SEXOCB==6)
datosDS%>%group_by(AÑOCM)%>%count(CPROMA)->provDS
datosHMS%>%group_by(AÑOCM)%>%count(CPROMA)->provHMS
datosMMS%>%group_by(AÑOCM)%>%count(CPROMA)->provMMS
datosprovincias<-rename(full_join(full_join(provDS,provHMS,by=c("AÑOCM","CPROMA")), provMMS,by=c("AÑOCM","CPROMA")),DS=n.x,HMS=n.y,MMS=n)
#Para poder operar con los datos cambiamos todos los NA restantes por 0.
datosprovincias[is.na(datosprovincias)]<-0
#Agregamos datos de comunidades autónomas y hacemos una correspondencia entre comunidades autónomas y provincias
provdesordenadas=sapply(poblacion,levels)$Provincias
provordenadas=c("Álava", "Albacete", "Alicante", "Almería", "Ávila", "Badajoz", "Islas Baleares", "Barcelona", "Burgos", "Cáceres", "Cádiz", "Castellón", "Ciudad Real", "Córdoba", "La Coruña", "Cuenca", "Gerona", "Granada", "Guadalajara", "Guipúzcoa", "Huelva", "Huesca", "Jaén", "León", "Lérida", "La Rioja", "Lugo", "Madrid", "Málaga", "Murcia", "Navarra", "Orense", "Asturias", "Palencia", "Las Palmas", "Pontevedra", "Salamanca", "Santa Cruz de Tenerife", "Cantabria", "Segovia", "Sevilla", "Soria", "Tarragona", "Teruel", "Toledo", "Valencia", "Valladolid", "Vizcaya", "Zamora", "Zaragoza", "Ceuta", "Melilla", "Extranjero")
comunidades<-c("País Vasco","Castilla - La Mancha","Comunidad Valenciana","Andalucía","Castilla y León","Extremadura","Islas Baleares","Cataluña","Castilla y León","Extremadura","Andalucía","Comunidad Valenciana","Castilla - La Mancha","Andalucía","Galicia","Castilla - La Mancha", "Cataluña", "Andalucía", "Castilla - La Mancha", "País Vasco", "Andalucía","Aragón", "Andalucía", "Castilla y León","Cataluña","La Rioja","Galicia","Comunidad de Madrid","Andalucía", "Región de Murcia","Comunidad Foral de Navarra", "Galicia", "Principado de Asturias","Castilla y León","Islas Canarias","Galicia", "Castilla y León","Islas Canarias", "Cantabria","Castilla y León","Andalucía", "Castilla y León","Cataluña","Aragón", "Castilla - La Mancha", "Comunidad Valenciana","Castilla y León","País Vasco","Castilla y León","Aragón","Ceuta", "Melilla", "Extranjero")
correspondencia<-data.frame(provordenadas,comunidades)
colnames(correspondencia)<-c("CPROMA","CCAA")
poblacion<-poblacion %>% mutate(Provincias=mapvalues(Provincias,from = provdesordenadas,to=provordenadas),Periodo=as.numeric(Periodo),Total=as.numeric(Total))
colnames(poblacion)<-c("CPROMA","AÑOCM","Población")
poblacionCCAA<-merge(poblacion,correspondencia)%>%group_by(AÑOCM,CCAA)%>%summarise(Población=sum(Población))
datosCCAA<-merge(datosprovincias,correspondencia)
datosDS%>%group_by(EDADCA)%>%count(EDADCB)->edadesDS
#Como dato curioso hay una mujer que se casó con 100 años de edad en nuestro data set (lo sabemos porque nació en 1905 y se casó en 2005), pero como los creadores de la codificación no se plantearon que ninguno de los cónyuges llegaría al altar con una edad de tres cifras, nos sale que tiene 0 años de edad. Hay que cambiarlo:
edadesDS[3690,"EDADCB"]<-100
datosHMS%>%group_by(EDADCA)%>%count(EDADCB)->edadesHMS
datosMMS%>%group_by(EDADCA)%>%count(EDADCB)->edadesMMS
#La elección de quién queda registrado como el cónyuge 1 y quién es el cónyuge 2 es completamente arbitraria en el caso de las parejas del mismo sexo (en las de distinto sexo, 1 es el hombre y 2 es la mujer)
#Para eliminar esta arbitrariedad, vamos a simetrizar los datos:
simedadesHMS<-edadesHMS
colnames(simedadesHMS)<-c("EDADCB","EDADCA","n")
edadesHMS<-full_join(edadesHMS,simedadesHMS,by=c("EDADCB","EDADCA"))
edadesHMS[is.na(edadesHMS)]<-0
edadesHMS<-edadesHMS%>%transmute(EDADCB,n=(n.x+n.y)/2)
simedadesMMS<-edadesMMS
colnames(simedadesMMS)<-c("EDADCB","EDADCA","n")
edadesMMS<-full_join(edadesMMS,simedadesMMS,by=c("EDADCB","EDADCA"))
edadesMMS[is.na(edadesMMS)]<-0
edadesMMS<-edadesMMS%>%transmute(EDADCB,n=(n.x+n.y)/2)
## 0.1.3- NACIONALIDADES DE LOS CONTRAYENTES
#Separamos los matrimonios por la nacionalidad de los cónyuges:
datosDS%>%group_by(PAISNACCA)%>%count(PAISNACCB)->paisDS
datosHMS%>%group_by(PAISNACCA)%>%count(PAISNACCB)->paisHMS
datosMMS%>%group_by(PAISNACCA)%>%count(PAISNACCB)->paisMMS
#Nos interesa saber con qué países estamos trabajando así que empleamos el Excel que recoge los códigos de países
paises<-read.xlsx("CodigosPaises.xlsx",colNames=TRUE)[,c(2,3)]
paisDS<-paisDS%>%transmute(PAISA=mapvalues(PAISNACCA,from=paises$Código.de.país,to=paises$Literal.de.País),PAISB=mapvalues(PAISNACCB,from=paises$Código.de.país,to=paises$Literal.de.País),n=n)
paisDS<-paisDS[,-1]
paisDS<-paisDS[complete.cases(paisDS),] #Eliminamos los datos corruptos en los que no se ha especificado el país
paisDS<-paisDS%>%filter(PAISA!=390 & PAISA!=449 & PAISB!=390) #Eliminamos estos datos que contienen los países 390 y 449 que no están en el diccionario geográfico
paisHMS<-paisHMS%>%transmute(PAISA=mapvalues(PAISNACCA,from=paises$Código.de.país,to=paises$Literal.de.País),PAISB=mapvalues(PAISNACCB,from=paises$Código.de.país,to=paises$Literal.de.País),n=n)
paisHMS<-paisHMS[,-1]
paisHMS<-paisHMS[complete.cases(paisHMS),]
paisMMS<-paisMMS%>%transmute(PAISA=mapvalues(PAISNACCA,from=paises$Código.de.país,to=paises$Literal.de.País),PAISB=mapvalues(PAISNACCB,from=paises$Código.de.país,to=paises$Literal.de.País),n=n)
paisMMS<-paisMMS[,-1]
paisMMS<-paisMMS[complete.cases(paisMMS),]
### 0.2- DATOS OBTENIDOS DE LAS SERIES DE DIVORCIOS
#Me apetecía también incluir este apartado en el trabajo, pero quería centrarme principalmente en l
#Procedemos a incluir las variables de divorcios por tipo de divorcio:
divtipoDS<-read.table(file="DS_DivorciosTipo.csv",sep="\t",header=TRUE)
divtipoMS<-read.table(file="MS_DivorciosTipo.csv",sep="\t",header=TRUE)
#La primera columna de divtipoDS es irrelevante, ya que solo pone "Total Nacional" así que la quitamos:
divtipoDS<-divtipoDS[,-1]
#Unimos todas las variables en una única tabla
divtipo<-full_join(divtipoDS,filter(divtipoMS,Sexo=="Total")[,-2],by=c("Tipo.de.divorcio","Periodo"))
divtipo<-full_join(divtipo,filter(divtipoMS,Sexo=="Hombres")[,-2],by=c("Tipo.de.divorcio","Periodo"))
divtipo<-full_join(divtipo,filter(divtipoMS,Sexo=="Mujeres")[,-2],by=c("Tipo.de.divorcio","Periodo"))
#Procedemos a incluir las variables de divorcios por duración:
divduracionDS<-read.table(file="DS_DivorciosDuracion.csv",sep="\t",header=TRUE)
divduracionMS<-read.table(file="MS_DivorciosDuracion.csv",sep="\t",header=TRUE)
#La segunda columna de divduracionDS es irrelevante ya que solo pone Total, así que la quitamos. Unificamos estos datos a las categorías de los datos de matrimonios del mismo sexo
divduracionDS<-divduracionDS[,-2]
#Unimos todas las variables del mismo sexo en una única tabla
divduracionMS<-full_join(full_join(filter(divduracionMS,Sexo=="Total")[,-2],filter(divduracionMS,Sexo=="Hombres")[,-2],by=c("Duración.del.matrimonio","Periodo")),filter(divduracionMS,Sexo=="Mujeres")[,-2],by=c("Duración.del.matrimonio","Periodo"))
#### 1. ANÁLISIS Y REPRESENTACIÓN GRÁFICA DE LA DISTRIBUCIÓN DE LOS MATRIMONIOS POR MUNICIPIOS, PROVINCIAS Y COMUNIDADES AUTÓNOMAS EN ESPAÑA
### 1.1- TABULACIÓN Y ANÁLISIS ESTADÍSTICO BÁSICO DE LOS DATOS
## 1.1.0- NACIONAL
#Hallamos el número total de matrimonios entre los años 2005-2018 y los representamos en tabla
matraño<-datosprovincias%>%group_by(AÑOCM)%>%summarise(suma_DS=sum(DS),suma_HMS=sum(HMS),suma_MMS=sum(MMS),suma_MS=sum(HMS)+sum(MMS),media_DS=mean(DS),media_HMS=mean(HMS),media_MMS=mean(MMS),media_MS=mean(HMS)+mean(MMS))
tmatraño<-matraño
colnames(tmatraño)<-c("Año","Matrimonios de distinto sexo","Matrimonios de hombres","Matrimonios de mujeres","Matrimonios del mismo sexo","Media de matrimonios de distinto sexo","Media de matrimonios de hombres","Media de matrimonios de mujeres","Media de matrimonios del mismo sexo")
reactable(tmatraño,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFDAC1")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
source('~/MatrimoniosMismoSexo/MatrimoniosMismoSexo.R')
tmatraño<-matraño[,c(1,2,3,4,5)]
matraño<-datosprovincias%>%group_by(AÑOCM)%>%summarise(suma_DS=sum(DS),suma_HMS=sum(HMS),suma_MMS=sum(MMS),suma_MS=sum(HMS)+sum(MMS),media_DS=mean(DS),media_HMS=mean(HMS),media_MMS=mean(MMS),media_MS=mean(HMS)+mean(MMS))
tmatraño<-matraño[,c(1,2,3,4,5)]
colnames(tmatraño)<-c("Año","Matrimonios de distinto sexo","Matrimonios de hombres","Matrimonios de mujeres","Matrimonios del mismo sexo")
reactable(tmatraño,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFDAC1")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Hallamos el porcentaje de matrimonios de hombres y mujeres entre los matrimonios del mismo sexo
porHMaño<-datosprovincias%>%group_by(AÑOCM)%>%summarise(porH=100*sum(HMS)/(sum(HMS)+sum(MMS)),porM=100*sum(MMS)/(sum(HMS)+sum(MMS)))
colnames(porHMaño)<-c("Año","Porcentaje de matrimonios de hombres del total de matrimonios del mismo sexo","Porcentaje de matrimonios de mujeres del total de matrimonios del mismo sexo")
reactable(porHMaño,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FF9AA2")),
filterable = TRUE, searchable=TRUE, highlight = TRUE, rownames = FALSE, compact=TRUE,pagination = FALSE)
#Hallamos el porcentaje de matrimonios respecto al total que se ofician por año
pormatraño<-datosprovincias%>%group_by(AÑOCM)%>%summarise(porcentaje_DS=100*sum(DS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_HMS=100*sum(HMS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_MMS=100*sum(MMS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_MS=100*(sum(MMS)+sum(HMS))/(sum(DS)+sum(HMS)+sum(MMS)))
tpormatraño<-pormatraño
colnames(tpormatraño)<-c("Año","Porcentaje de matrimonios de distinto sexo","Porcentaje de matrimonios de hombres","Porcentaje de matrimonios de mujeres","Porcentaje de matrimonios del mismo sexo")
reactable(tpormatraño,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFDAC1")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
## 1.1.1- MUNICIPIOS
#Separamos los datos por porcentaje
tpormunicipios<-datosmunicipios%>%transmute(Municipio,"Provincia"=revalue(CPROMA,CP),"Porcentaje de matrimonios de distinto sexo"=100*DS/(DS+HMS+MMS),"Porcentaje de matrimonios de hombres"=100*HMS/(DS+HMS+MMS),"Porcentaje de matrimonios de mujeres"=100*MMS/(DS+HMS+MMS),"Porcentaje de matrimonios del mismo sexo"=100*(HMS+MMS)/(DS+HMS+MMS))
#Representamos los datos en una tabla
tdatosmunicipios<-datosmunicipios%>%transmute("Municipio"=Municipio,"Provincia"=revalue(CPROMA,CP),"Matrimonios de distinto sexo"=DS,"Matrimonios de hombres"=HMS,"Matrimonios de mujeres"=MMS)
#Unimos los datos anteriores en una tabla
reactable(full_join(tdatosmunicipios,tpormunicipios,by=c("Municipio","Provincia")),defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "lightblue")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Los volvemos a unir por columnas
datosmunicipios<-rename(full_join(full_join(munDS,munHMS,by=c("CMUMA","CPROMA")), munMMS,by=c("CMUMA","CPROMA")),DS=n.x,HMS=n.y,MMS=n)
#Hay en municipios en los que no ha habido matrimonios del mismo sexo, así que al unir las columnas aparece NA. Cambiamos esto por 0
datosmunicipios$HMS[is.na(datosmunicipios$HMS)]<-0
datosmunicipios$MMS[is.na(datosmunicipios$MMS)]<-0
#Leemos ahora con la función read.xlsx el archivo de Excel con la corrspondencia de los datos del municipio y
correspmunicipios<-read.xlsx("CodigosMunicipios.xlsx")
correspmunicipios<-correspmunicipios%>%transmute(CMUMA=CMUMA,CPROMA=CPROMA,Municipio=Nombre)
datosmunicipios<-merge(datosmunicipios,correspmunicipios)
## Modificamos el formato e idioma de las tablas creadas con el paquete reactable
options(reactable.language = reactableLang(searchPlaceholder = "Buscar...",
noData = "No se ha encontrado ninguna entrada",
pageInfo = "Entradas desde la fila {rowStart} a la fila {rowEnd} ({rows} filas)"))
## Copiamos el comando para representar las rectas de regresión
ggplotRegression <- function (lmObject,Title,xTitle,yTitle) {
real<-lmObject$model[,2]
predicted<-lmObject$model[,1]
regression<-data.frame(real,predicted)
coeff<-paste(names(lmObject$coefficients), "=", round(as.vector(lmObject$coefficients),8), "( P.value =", round(as.vector(summary(lmObject)$coefficients[,"Pr(>|t|)"]),3),")")
coeffSubtitle<-c()
for(i in 1:length(coeff)){coeffSubtitle<-paste(coeffSubtitle,coeff[i],sep="\n")}
gg<-ggplot(regression, aes_string(x = real, y = predicted)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = Title , caption = bquote("Adj"~R^2 == .(round(summary(lmObject)$adj.r.squared,4))),subtitle = coeffSubtitle,x=xTitle,y=yTitle)
gg+theme_bw()+
theme(plot.title = element_text(size = 9),plot.subtitle = element_text(size = 7),plot.caption = element_text(face = "bold"))
}
#Esta opción la tenemos para que evitar el uso de notación científica en las gráficas ya que es poco clarificador
options(scipen=10000)
#### 0- IMPORTACIÓN Y LIMPIEZA DE LOS DATOS CON LOS QUE VAMOS A TRABAJAR
#Vamos a ser sistemáticos:
#De ahora en adelante usaremos las abreviaturas: DS=distinto sexo, MS=mismo sexo, HMS=hombres mismo sexo, MMS=mujeres mismo sexo para referirnos a las parejas con las que trabajemos
### 0.1- IMPORTACIÓN Y LIMPIEZA DE LOS DATOS OBTENIDOS MEDIANTE LAS SERIES DE MICRODATOS DE MATRIMONIOS DEL INE
## En primer lugar, vamos a exportar los datos más sencillos que poseemos, que son los de la población de las provincias. Estos se encuentran en la web del INE, en formato .csv.
#Datos poblacionales de las provincias (2005-2018)
poblacion<-read.table(file="Poblacion.txt",sep="\t",header=TRUE)[,c("Provincias","Periodo","Total")]
#Los datos del extranjero están disponibles en un fichero adicional y además solamente están disponibles a partir del año 2009
poblacionextranjero<-transpose(read.table(file="PoblacionExtranjero.txt",sep="\t"))
poblacionextranjero<-cbind(c("Extranjero","Extranjero","Extranjero","Extranjero","Extranjero","Extranjero","Extranjero","Extranjero","Extranjero","Extranjero"),poblacionextranjero)
colnames(poblacionextranjero)<-c("Provincias","Periodo","Total")
poblacion<-rbind(poblacion,poblacionextranjero)
#Los datos disponibles en el INE en formato .csv son bastante limitados (y más aún en el caso de las parejas del mismo sexo). Es por esto que he decidido recurrir a los microdatos.
#Estos recogen los datos de todos los matrimonios celebrados en España anonimizados y codificados en formato fixed width files.
#Para analizar los datos hay que consultar la información del INE para ver los caracteres de cada línea del archico están reservados para cada columna.
#Con esta información se crea (manualmente, ya que no hay otra opción) un vector que recoge las longitudes variables de las categorías que se estudian (por ejemplo, para codificar sexo, se utiliza un solo caracter 1 o 6, mientras que se utilizan 2 para codificar edad, 4 para año...)
#Para complicar el tratamiento de los datos, además en 2007 se realizó un cambio en la codificación de los microdatos de matrimonio, de modo que hay que analizarlos aparte. Hasta 2007 se recogían 41 datos de cada matrimonio y a partir de 2007 se pasaron a recoger nada más y nada menos que 78.
#Para poder recoger las categorías, he tenido que estudiar a fondo los archivos que determinan la anonimización de las categorías, para ver qué características que se recogían eran comunes a ambas series y modificar los nombres de estas para poder trabajar con ellas.
#Este es el proceso de lectura de datos. Para ello se ha empleado la función read_fwf específica para los archivos de anchura constante.
#Esta función es parte del paquete readr especial para big data, ya que de no utilizar este paquete, el tiempo de lectura de los archivos (cada serie anual son 25 Mb en formato numérico) se multiplicaba hasta por 60, al usar la función read.fwf
vectorlongitud1=c(3,2,2,4,1,3,2,2,4,1,1,2,3,2,2,4,1,1,2,3,2,3,3,1,1,2,4,2,4,1,1,1,1,1,1,1,1,1,1,2,2)
colnames1=c("CMUNI","CPROI","MESCM","AÑOCM","TIPOC","CMUMA","CPROMA","MESNCA","AÑONCA","SEXOCA","ECIVCA","SPROF1","CMUNNCA","CPRONCA","MESNCB","AÑONCB","SEXOCB","ECIVCB","SPROF2","CMUNNCB","CPRONCB","PAISNACCA","PAISNACCB","SNORM1","SNORM2","MESDCA","AÑODCA","MESDCB","AÑODCB","TMUNIN","TMUNRMA","TMUNRA","TMUNRB","CARIN","CBRIN","MARIN","CARMR","CBRMR","MARMR","EDADCA","EDADCB")
datos2005<-read_fwf(file="Matrimonios.a2005.txt", fwf_widths(vectorlongitud1,col_names=colnames1))
datos2006<-read_fwf(file="Matrimonios.a2006.txt", fwf_widths(vectorlongitud1,col_names=colnames1))
datos2007<-read_fwf(file="Matrimonios.a2007.txt", fwf_widths(vectorlongitud1,col_names=colnames1))
vectorlongitud2=c(2,3,2,4,1,2,3,3,2,4,1,1,3,1,2,3,3,1,1,2,4,1,2,4,1,2,3,3,2,2,2,4,1,1,3,1,2,3,3,1,1,2,4,1,2,4,1,2,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,12)
colnames2=c("CPROI","CMUNI","MESCM","AÑOCM","TIPOC","CPROMA","CMUMA","CPAISRXMA","MESNCA","AÑONCA","NACIOECA","NACIOXCA","PAISNACCA","CUANNACCA","CPRONCA","CMUNNCA","PAISNXCA","SEXOCA","ECIVCA","MESFACONANTCA","AÑOFACONANTCA","NORMVCA","MESDCA","AÑODCA","NORDMDCA","CPRORECA","CMUNRECA","PAISREXCA","ESTUDIOCA","CAUTOCA","MESNCB","AÑONCB","NACIOECB","NACIOXCB","PAISNACCB","CUANNACCB","CPRONCB","CMUNNCB","PAISNXCB","SEXOCB","ECIVCB","MESFACONANTCB","AÑOFACONANTCB","NORMVCB","MESDCB","AÑODCB","NORDMDCB","CPRORECB","CMUNRECB","PAISREXCB","ESTUDIOCB","CAUTOCB","TMUNIN","TMUNRMA","TMUNNA","TMUNNB","TMUNRA","TMUNRB","CARIN","CBRIN","MARIN","CARMR","CBRMR","MARMR","EDADCA","EDADCB","TPAISNACIMIENTOCA","TPAISNACIMIENTOCB","TPAISNACIONALIDADCA","TPAISNACIONALIDADCB","TPAISRMA","TPAISRCA","TPAISRCB","NACIDOECA","NACIDOXCA","NACIDOECB","NACIDOXCB","BLANCOS")
#Como curiosidad, leer estas 10 tablas con el comando read_fwf tarda 5 veces menos que leer una sola de ellas con read.fwf. De este experimento es de donde saco la conclusión anterior.
start <- Sys.time()
datos2008<-read_fwf(file="Matrimonios.a2008.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2009<-read_fwf(file="Matrimonios.a2009.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2010<-read_fwf(file="Matrimonios.a2010.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2011<-read_fwf(file="Matrimonios.a2011.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2012<-read_fwf(file="Matrimonios.a2012.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2013<-read_fwf(file="Matrimonios.a2013.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2014<-read_fwf(file="Matrimonios.a2014.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2015<-read_fwf(file="Matrimonios.a2015.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2016<-read_fwf(file="Matrimonios.a2016.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2017<-read_fwf(file="Matrimonios.a2017.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
datos2018<-read_fwf(file="Matrimonios.a2018.txt", fwf_widths(vectorlongitud2,col_names=colnames2))
end <- Sys.time()
end-start
#Seleccionamos ahora las variables comunes a ambas codificaciones de datos, que son aquellas con las que podemos trabajar (aunque solo vamos a analizar una pequeña parte de ellas, son 37)
#Estas variables están disponibles para futuros análisis en estos datos.
#La codificación empleada facilita añadir las series anuales que salgan en el futuro.
colintersection<-intersect(colnames1,colnames2)
#Seleccionamos las columnas comunes y unimos las series de datos con la función rbind
datos0507<-rbind(datos2005[,colintersection],datos2006[,colintersection],datos2007[,colintersection])
datos0818<-rbind(datos2008[,colintersection],datos2009[,colintersection],datos2010[,colintersection],datos2011[,colintersection],datos2012[,colintersection],datos2013[,colintersection],datos2014[,colintersection],datos2015[,colintersection],datos2016[,colintersection],datos2017[,colintersection],datos2018[,colintersection])
datostotal<-rbind(datos0507,datos0818)
#En 2005-2007 se codificaba el matrimonio en el extranjero con el codigo de provincia 66 y luego se cambió a <NA> en los siguientes años, así que para ser coherentes, vamos a cambiar todos los años a 66.
datostotal$CPROMA[is.na(datostotal$CPROMA)]<-"66"
datostotal$CMUMA[is.na(datostotal$CMUMA)]<-"000"
datostotal<-datostotal%>%mutate("CMUMA"=revalue(CMUMA,c("0" = "000")))
#Separaremos los matrimonios de las variables entre matrimonios de distinto sexo, de hombres de mismo sexo y de mujeres de mismo sexo; y, aparte, por las categorías que estudiaremos posteriormente en el trabajo.
#Se ha comprobado que si la pareja es de distinto sexo, el primer registrado siempre será el hombre y la segunda la mujer.
## 0.1.1- DISTRIBUCIÓN GEOGRÁFICA DEL MATRIMONIO
# Separamos los datos de matrimonios por municipios de residencia. Lo hacemos esto lo primero porque nos interesan los códigos de municipio que constan de código de provincia (dos números, en el caso de Salamanca 37) y tres números de municipio
datostotal%>% filter(SEXOCA==1,SEXOCB==6) %>% group_by(CPROMA)%>%count(CMUMA)->munDS
datostotal%>% filter(SEXOCA==1,SEXOCB==1) %>% group_by(CPROMA)%>%count(CMUMA)->munHMS
datostotal%>% filter(SEXOCA==6,SEXOCB==6) %>% group_by(CPROMA)%>%count(CMUMA)->munMMS
#Los volvemos a unir por columnas
datosmunicipios<-rename(full_join(full_join(munDS,munHMS,by=c("CMUMA","CPROMA")), munMMS,by=c("CMUMA","CPROMA")),DS=n.x,HMS=n.y,MMS=n)
#Hay en municipios en los que no ha habido matrimonios del mismo sexo, así que al unir las columnas aparece NA. Cambiamos esto por 0
datosmunicipios$HMS[is.na(datosmunicipios$HMS)]<-0
datosmunicipios$MMS[is.na(datosmunicipios$MMS)]<-0
#Leemos ahora con la función read.xlsx el archivo de Excel con la corrspondencia de los datos del municipio y
correspmunicipios<-read.xlsx("CodigosMunicipios.xlsx")
correspmunicipios<-correspmunicipios%>%transmute(CMUMA=CMUMA,CPROMA=CPROMA,Municipio=Nombre)
datosmunicipios<-merge(datosmunicipios,correspmunicipios)
#Ahora que ya hemos recogido los datos de muncicipios, sustituimos los códigos de provincia. Utilizamos para esto la función revalue.
CP=c("01" = "Álava", "02" = "Albacete", "03" = "Alicante", "04" = "Almería", "05" = "Ávila", "06" = "Badajoz", "07" = "Islas Baleares", "08" = "Barcelona", "09" = "Burgos", "10" = "Cáceres", "11" = "Cádiz", "12" = "Castellón", "13" = "Ciudad Real", "14" = "Córdoba", "15" = "La Coruña", "16" = "Cuenca", "17" = "Gerona", "18" = "Granada", "19" = "Guadalajara", "20" = "Guipúzcoa", "21" = "Huelva", "22" = "Huesca", "23" = "Jaén", "24" = "León", "25" = "Lérida", "26" = "La Rioja", "27" = "Lugo", "28" = "Madrid", "29" = "Málaga", "30" = "Murcia", "31" = "Navarra", "32" = "Orense", "33" = "Asturias", "34" = "Palencia", "35" = "Las Palmas", "36" = "Pontevedra", "37" = "Salamanca", "38" = "Santa Cruz de Tenerife", "39" = "Cantabria", "40" = "Segovia", "41" = "Sevilla", "42" = "Soria", "43" = "Tarragona", "44" = "Teruel", "45" = "Toledo", "46" = "Valencia", "47" = "Valladolid", "48" = "Vizcaya", "49" = "Zamora", "50" = "Zaragoza", "51" = "Ceuta", "52" = "Melilla", "66" = "Extranjero")
datostotal<-datostotal%>% mutate("CPROI"=revalue(CPROI,CP),"CPROMA"=revalue(CPROMA,CP),"CPRONCA"=revalue(CPRONCA,CP),"CPRONCB"=revalue(CPRONCB,CP))
#Filtramos por tipo de matrimonio
datosDS<-datostotal%>% filter(SEXOCA==1,SEXOCB==6)
datosHMS<-datostotal%>% filter(SEXOCA==1,SEXOCB==1)
datosMMS<-datostotal%>% filter(SEXOCA==6,SEXOCB==6)
#Número de matrimonios por provincia de residencia y año
datosDS%>%group_by(AÑOCM)%>%count(CPROMA)->provDS
datosHMS%>%group_by(AÑOCM)%>%count(CPROMA)->provHMS
datosMMS%>%group_by(AÑOCM)%>%count(CPROMA)->provMMS
datosprovincias<-rename(full_join(full_join(provDS,provHMS,by=c("AÑOCM","CPROMA")), provMMS,by=c("AÑOCM","CPROMA")),DS=n.x,HMS=n.y,MMS=n)
#Para poder operar con los datos cambiamos todos los NA restantes por 0.
datosprovincias[is.na(datosprovincias)]<-0
#Agregamos datos de comunidades autónomas y hacemos una correspondencia entre comunidades autónomas y provincias
provdesordenadas=sapply(poblacion,levels)$Provincias
provordenadas=c("Álava", "Albacete", "Alicante", "Almería", "Ávila", "Badajoz", "Islas Baleares", "Barcelona", "Burgos", "Cáceres", "Cádiz", "Castellón", "Ciudad Real", "Córdoba", "La Coruña", "Cuenca", "Gerona", "Granada", "Guadalajara", "Guipúzcoa", "Huelva", "Huesca", "Jaén", "León", "Lérida", "La Rioja", "Lugo", "Madrid", "Málaga", "Murcia", "Navarra", "Orense", "Asturias", "Palencia", "Las Palmas", "Pontevedra", "Salamanca", "Santa Cruz de Tenerife", "Cantabria", "Segovia", "Sevilla", "Soria", "Tarragona", "Teruel", "Toledo", "Valencia", "Valladolid", "Vizcaya", "Zamora", "Zaragoza", "Ceuta", "Melilla", "Extranjero")
comunidades<-c("País Vasco","Castilla - La Mancha","Comunidad Valenciana","Andalucía","Castilla y León","Extremadura","Islas Baleares","Cataluña","Castilla y León","Extremadura","Andalucía","Comunidad Valenciana","Castilla - La Mancha","Andalucía","Galicia","Castilla - La Mancha", "Cataluña", "Andalucía", "Castilla - La Mancha", "País Vasco", "Andalucía","Aragón", "Andalucía", "Castilla y León","Cataluña","La Rioja","Galicia","Comunidad de Madrid","Andalucía", "Región de Murcia","Comunidad Foral de Navarra", "Galicia", "Principado de Asturias","Castilla y León","Islas Canarias","Galicia", "Castilla y León","Islas Canarias", "Cantabria","Castilla y León","Andalucía", "Castilla y León","Cataluña","Aragón", "Castilla - La Mancha", "Comunidad Valenciana","Castilla y León","País Vasco","Castilla y León","Aragón","Ceuta", "Melilla", "Extranjero")
correspondencia<-data.frame(provordenadas,comunidades)
colnames(correspondencia)<-c("CPROMA","CCAA")
poblacion<-poblacion %>% mutate(Provincias=mapvalues(Provincias,from = provdesordenadas,to=provordenadas),Periodo=as.numeric(Periodo),Total=as.numeric(Total))
colnames(poblacion)<-c("CPROMA","AÑOCM","Población")
poblacionCCAA<-merge(poblacion,correspondencia)%>%group_by(AÑOCM,CCAA)%>%summarise(Población=sum(Población))
datosCCAA<-merge(datosprovincias,correspondencia)
## 0.1.2- EDADES
datosDS%>%group_by(EDADCA)%>%count(EDADCB)->edadesDS
#Como dato curioso hay una mujer que se casó con 100 años de edad en nuestro data set (lo sabemos porque nació en 1905 y se casó en 2005), pero como los creadores de la codificación no se plantearon que ninguno de los cónyuges llegaría al altar con una edad de tres cifras, nos sale que tiene 0 años de edad. Hay que cambiarlo:
edadesDS[3690,"EDADCB"]<-100
datosHMS%>%group_by(EDADCA)%>%count(EDADCB)->edadesHMS
datosMMS%>%group_by(EDADCA)%>%count(EDADCB)->edadesMMS
#La elección de quién queda registrado como el cónyuge 1 y quién es el cónyuge 2 es completamente arbitraria en el caso de las parejas del mismo sexo (en las de distinto sexo, 1 es el hombre y 2 es la mujer)
#Para eliminar esta arbitrariedad, vamos a simetrizar los datos:
simedadesHMS<-edadesHMS
colnames(simedadesHMS)<-c("EDADCB","EDADCA","n")
edadesHMS<-full_join(edadesHMS,simedadesHMS,by=c("EDADCB","EDADCA"))
edadesHMS[is.na(edadesHMS)]<-0
edadesHMS<-edadesHMS%>%transmute(EDADCB,n=(n.x+n.y)/2)
simedadesMMS<-edadesMMS
colnames(simedadesMMS)<-c("EDADCB","EDADCA","n")
edadesMMS<-full_join(edadesMMS,simedadesMMS,by=c("EDADCB","EDADCA"))
edadesMMS[is.na(edadesMMS)]<-0
edadesMMS<-edadesMMS%>%transmute(EDADCB,n=(n.x+n.y)/2)
## 0.1.3- NACIONALIDADES DE LOS CONTRAYENTES
#Separamos los matrimonios por la nacionalidad de los cónyuges:
datosDS%>%group_by(PAISNACCA)%>%count(PAISNACCB)->paisDS
datosHMS%>%group_by(PAISNACCA)%>%count(PAISNACCB)->paisHMS
datosMMS%>%group_by(PAISNACCA)%>%count(PAISNACCB)->paisMMS
#Nos interesa saber con qué países estamos trabajando así que empleamos el Excel que recoge los códigos de países
paises<-read.xlsx("CodigosPaises.xlsx",colNames=TRUE)[,c(2,3)]
paisDS<-paisDS%>%transmute(PAISA=mapvalues(PAISNACCA,from=paises$Código.de.país,to=paises$Literal.de.País),PAISB=mapvalues(PAISNACCB,from=paises$Código.de.país,to=paises$Literal.de.País),n=n)
paisDS<-paisDS[,-1]
paisDS<-paisDS[complete.cases(paisDS),] #Eliminamos los datos corruptos en los que no se ha especificado el país
paisDS<-paisDS%>%filter(PAISA!=390 & PAISA!=449 & PAISB!=390) #Eliminamos estos datos que contienen los países 390 y 449 que no están en el diccionario geográfico
paisHMS<-paisHMS%>%transmute(PAISA=mapvalues(PAISNACCA,from=paises$Código.de.país,to=paises$Literal.de.País),PAISB=mapvalues(PAISNACCB,from=paises$Código.de.país,to=paises$Literal.de.País),n=n)
paisHMS<-paisHMS[,-1]
paisHMS<-paisHMS[complete.cases(paisHMS),]
paisMMS<-paisMMS%>%transmute(PAISA=mapvalues(PAISNACCA,from=paises$Código.de.país,to=paises$Literal.de.País),PAISB=mapvalues(PAISNACCB,from=paises$Código.de.país,to=paises$Literal.de.País),n=n)
paisMMS<-paisMMS[,-1]
paisMMS<-paisMMS[complete.cases(paisMMS),]
### 0.2- DATOS OBTENIDOS DE LAS SERIES DE DIVORCIOS
#Me apetecía también incluir este apartado en el trabajo, pero quería centrarme principalmente en l
#Procedemos a incluir las variables de divorcios por tipo de divorcio:
divtipoDS<-read.table(file="DS_DivorciosTipo.csv",sep="\t",header=TRUE)
divtipoMS<-read.table(file="MS_DivorciosTipo.csv",sep="\t",header=TRUE)
#La primera columna de divtipoDS es irrelevante, ya que solo pone "Total Nacional" así que la quitamos:
divtipoDS<-divtipoDS[,-1]
#Unimos todas las variables en una única tabla
divtipo<-full_join(divtipoDS,filter(divtipoMS,Sexo=="Total")[,-2],by=c("Tipo.de.divorcio","Periodo"))
divtipo<-full_join(divtipo,filter(divtipoMS,Sexo=="Hombres")[,-2],by=c("Tipo.de.divorcio","Periodo"))
divtipo<-full_join(divtipo,filter(divtipoMS,Sexo=="Mujeres")[,-2],by=c("Tipo.de.divorcio","Periodo"))
#Procedemos a incluir las variables de divorcios por duración:
divduracionDS<-read.table(file="DS_DivorciosDuracion.csv",sep="\t",header=TRUE)
divduracionMS<-read.table(file="MS_DivorciosDuracion.csv",sep="\t",header=TRUE)
#La segunda columna de divduracionDS es irrelevante ya que solo pone Total, así que la quitamos. Unificamos estos datos a las categorías de los datos de matrimonios del mismo sexo
divduracionDS<-divduracionDS[,-2]
#Unimos todas las variables del mismo sexo en una única tabla
divduracionMS<-full_join(full_join(filter(divduracionMS,Sexo=="Total")[,-2],filter(divduracionMS,Sexo=="Hombres")[,-2],by=c("Duración.del.matrimonio","Periodo")),filter(divduracionMS,Sexo=="Mujeres")[,-2],by=c("Duración.del.matrimonio","Periodo"))
#### 1. ANÁLISIS Y REPRESENTACIÓN GRÁFICA DE LA DISTRIBUCIÓN DE LOS MATRIMONIOS POR MUNICIPIOS, PROVINCIAS Y COMUNIDADES AUTÓNOMAS EN ESPAÑA
### 1.1- TABULACIÓN Y ANÁLISIS ESTADÍSTICO BÁSICO DE LOS DATOS
## 1.1.0- NACIONAL
#Hallamos el número total de matrimonios entre los años 2005-2018 y los representamos en tabla
matraño<-datosprovincias%>%group_by(AÑOCM)%>%summarise(suma_DS=sum(DS),suma_HMS=sum(HMS),suma_MMS=sum(MMS),suma_MS=sum(HMS)+sum(MMS),media_DS=mean(DS),media_HMS=mean(HMS),media_MMS=mean(MMS),media_MS=mean(HMS)+mean(MMS))
tmatraño<-matraño[,c(1,2,3,4,5)]
colnames(tmatraño)<-c("Año","Matrimonios de distinto sexo","Matrimonios de hombres","Matrimonios de mujeres","Matrimonios del mismo sexo")
reactable(tmatraño,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFDAC1")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Hallamos el porcentaje de matrimonios de hombres y mujeres entre los matrimonios del mismo sexo
porHMaño<-datosprovincias%>%group_by(AÑOCM)%>%summarise(porH=100*sum(HMS)/(sum(HMS)+sum(MMS)),porM=100*sum(MMS)/(sum(HMS)+sum(MMS)))
colnames(porHMaño)<-c("Año","Porcentaje de matrimonios de hombres del total de matrimonios del mismo sexo","Porcentaje de matrimonios de mujeres del total de matrimonios del mismo sexo")
reactable(porHMaño,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FF9AA2")),
filterable = TRUE, searchable=TRUE, highlight = TRUE, rownames = FALSE, compact=TRUE,pagination = FALSE)
#Hallamos el porcentaje de matrimonios respecto al total que se ofician por año
pormatraño<-datosprovincias%>%group_by(AÑOCM)%>%summarise(porcentaje_DS=100*sum(DS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_HMS=100*sum(HMS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_MMS=100*sum(MMS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_MS=100*(sum(MMS)+sum(HMS))/(sum(DS)+sum(HMS)+sum(MMS)))
tpormatraño<-pormatraño
colnames(tpormatraño)<-c("Año","Porcentaje de matrimonios de distinto sexo","Porcentaje de matrimonios de hombres","Porcentaje de matrimonios de mujeres","Porcentaje de matrimonios del mismo sexo")
reactable(tpormatraño,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFDAC1")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
## 1.1.1- MUNICIPIOS
#Separamos los datos por porcentaje
tpormunicipios<-datosmunicipios%>%transmute(Municipio,"Provincia"=revalue(CPROMA,CP),"Porcentaje de matrimonios de distinto sexo"=100*DS/(DS+HMS+MMS),"Porcentaje de matrimonios de hombres"=100*HMS/(DS+HMS+MMS),"Porcentaje de matrimonios de mujeres"=100*MMS/(DS+HMS+MMS),"Porcentaje de matrimonios del mismo sexo"=100*(HMS+MMS)/(DS+HMS+MMS))
View(tpormunicipios)
View(tpormunicipios)
#Representamos los datos en una tabla
tdatosmunicipios<-datosmunicipios%>%transmute("Municipio"=Municipio,"Provincia"=revalue(CPROMA,CP),"Matrimonios de distinto sexo"=DS,"Matrimonios de hombres"=HMS,"Matrimonios de mujeres"=MMS)
#Unimos los datos anteriores en una tabla
reactable(full_join(tdatosmunicipios,tpormunicipios,by=c("Municipio","Provincia")),defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "lightblue")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
## 1.1.2- PROVINCIAS
#Hallamos lo mismo que hallamos para el territorio nacional por año, pero para las provincias esta vez
matrprovincia<-datosprovincias%>%group_by(CPROMA)%>%summarise(suma_DS=sum(DS),suma_HMS=sum(HMS),suma_MMS=sum(MMS),suma_MS=sum(HMS)+sum(MMS),media_DS=mean(DS),media_HMS=mean(HMS),media_MMS=mean(MMS),media_MS=mean(HMS)+mean(MMS))
tmatrprovincia<-matrprovincia
colnames(tmatrprovincia)<-c("Provincia","Matrimonios de distinto sexo","Matrimonios de hombres","Matrimonios de mujeres","Matrimonios del mismo sexo","Media de matrimonios de distinto sexo","Media de matrimonios de hombres","Media de matrimonios de mujeres","Media de matrimonios del mismo sexo")
reactable(tmatrprovincia,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFFFD8")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Hallamos los porcentajes de hombres y mujeres respecto al total de matrimonios del mismo sexo por provincia
porHMpro<-datosprovincias%>%group_by(CPROMA)%>%summarise(porH=100*sum(HMS)/(sum(HMS)+sum(MMS)),porM=100*sum(MMS)/(sum(HMS)+sum(MMS)))
colnames(porHMpro)<-c("Provincia","Porcentaje de matrimonios de hombres del total de matrimonios del mismo sexo","Porcentaje de matrimonios de mujeres del total de matrimonios del mismo sexo")
reactable(porHMpro,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FF9AA2")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Hallamos los porcentajes de matrimonios por año de cada tipo
pordatosprovincias<-datosprovincias%>%transmute(CPROMA,porcentaje_DS=100*DS/(DS+HMS+MMS),porcentaje_HMS=100*HMS/(DS+HMS+MMS),porcentaje_MMS=100*MMS/(DS+HMS+MMS),porcentaje_MS=100*(MMS+HMS)/(DS+MMS+HMS))
tpordatosprovincias<-pordatosprovincias
colnames(tpordatosprovincias)<-c("Año","Provincia","Porcentaje de matrimonios de distinto sexo","Porcentaje de matrimonios de hombres","Porcentaje de matrimonios de mujeres","Porcentaje de matrimonios del mismo sexo")
reactable(tpordatosprovincias,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFFFD8")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Hallamos los porcentajes de matrimonios de cada tipo
pormatrprovincia<-datosprovincias%>%group_by(CPROMA)%>%summarise(porcentaje_DS=100*sum(DS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_HMS=100*sum(HMS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_MMS=100*sum(MMS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_MS=100*(sum(MMS)+sum(HMS))/(sum(DS)+sum(HMS)+sum(MMS)))
tpormatrprovincia<-pormatrprovincia
colnames(tpormatrprovincia)<-c("Provincia","Porcentaje de matrimonios de distinto sexo","Porcentaje de matrimonios de hombres","Porcentaje de matrimonios de mujeres","Porcentaje de matrimonios del mismo sexo")
reactable(tpormatrprovincia,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFFFD8")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Hallamos los datos por CCAA
matrCCAA<-datosCCAA%>%group_by(CCAA)%>%summarise(suma_DS=sum(DS),suma_HMS=sum(HMS),suma_MMS=sum(MMS),suma_MS=sum(HMS)+sum(MMS),media_DS=mean(DS),media_HMS=mean(HMS),media_MMS=mean(MMS),media_MS=mean(HMS)+mean(MMS))
tmatrCCAA<-matrCCAA
colnames(tmatrCCAA)<-c("Comunidad Autónoma","Matrimonios de distinto sexo","Matrimonios de hombres","Matrimonios de mujeres","Matrimonios del mismo sexo","Media de matrimonios de distinto sexo","Media de matrimonios de hombres","Media de matrimonios de mujeres","Media de matrimonios del mismo sexo")
reactable(tmatrCCAA,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#B5EAD7")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Separamos los datos por porcentaje
tpormunicipios<-datosmunicipios%>%transmute(Municipio,"Provincia"=revalue(CPROMA,CP),"Porcentaje de matrimonios de distinto sexo"=100*DS/(DS+HMS+MMS),"Porcentaje de matrimonios de hombres"=100*HMS/(DS+HMS+MMS),"Porcentaje de matrimonios de mujeres"=100*MMS/(DS+HMS+MMS),"Porcentaje de matrimonios del mismo sexo"=100*(HMS+MMS)/(DS+HMS+MMS))
#Representamos los datos en una tabla
tdatosmunicipios<-datosmunicipios%>%transmute("Municipio"=Municipio,"Provincia"=revalue(CPROMA,CP),"Matrimonios de distinto sexo"=DS,"Matrimonios de hombres"=HMS,"Matrimonios de mujeres"=MMS,"Matrimonios del mismo sexo"=HMS+MMS)
#Unimos los datos anteriores en una tabla
reactable(full_join(tdatosmunicipios,tpormunicipios,by=c("Municipio","Provincia")),defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "lightblue")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Hallamos lo mismo que hallamos para el territorio nacional por año, pero para las provincias esta vez
matrprovincia<-datosprovincias%>%group_by(CPROMA)%>%summarise(suma_DS=sum(DS),suma_HMS=sum(HMS),suma_MMS=sum(MMS),suma_MS=sum(HMS)+sum(MMS),media_DS=mean(DS),media_HMS=mean(HMS),media_MMS=mean(MMS),media_MS=mean(HMS)+mean(MMS))
tmatrprovincia<-matrprovincia
colnames(tmatrprovincia)<-c("Provincia","Matrimonios de distinto sexo","Matrimonios de hombres","Matrimonios de mujeres","Matrimonios del mismo sexo","Media de matrimonios de distinto sexo","Media de matrimonios de hombres","Media de matrimonios de mujeres","Media de matrimonios del mismo sexo")
reactable(tmatrprovincia,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FFFFD8")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
matrCCAA<-datosCCAA%>%group_by(CCAA)%>%summarise(suma_DS=sum(DS),suma_HMS=sum(HMS),suma_MMS=sum(MMS),suma_MS=sum(HMS)+sum(MMS),media_DS=mean(DS),media_HMS=mean(HMS),media_MMS=mean(MMS),media_MS=mean(HMS)+mean(MMS))
tmatrCCAA<-matrCCAA
colnames(tmatrCCAA)<-c("Comunidad Autónoma","Matrimonios de distinto sexo","Matrimonios de hombres","Matrimonios de mujeres","Matrimonios del mismo sexo","Media de matrimonios de distinto sexo","Media de matrimonios de hombres","Media de matrimonios de mujeres","Media de matrimonios del mismo sexo")
reactable(tmatrCCAA,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#B5EAD7")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Hallamos los porcentajes de hombres y mujeres respecto al total de matrimonios del mismo sexo por provincia
porHMCCAA<-datosCCAA%>%group_by(CCAA)%>%summarise(porH=100*sum(HMS)/(sum(HMS)+sum(MMS)),porM=100*sum(MMS)/(sum(HMS)+sum(MMS)))
colnames(porHMCCAA)<-c("Comunidad Autónoma","Porcentaje de matrimonios de hombres del total de matrimonios del mismo sexo","Porcentaje de matrimonios de mujeres del total de matrimonios del mismo sexo")
reactable(porHMCCAA,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#FF9AA2")),
filterable = TRUE, searchable=TRUE, highlight = TRUE, rownames = FALSE, compact=TRUE,pagination = FALSE)
#Hallamos los porcentajes de matrimonios de cada tipo
pormatrCCAA<-datosCCAA%>%group_by(CCAA)%>%summarise(porcentaje_DS=100*sum(DS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_HMS=100*sum(HMS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_MMS=100*sum(MMS)/(sum(DS)+sum(HMS)+sum(MMS)),porcentaje_MS=100*(sum(MMS)+sum(HMS))/(sum(DS)+sum(HMS)+sum(MMS)))
tpormatrCCAA<-pormatrCCAA
colnames(tpormatrCCAA)<-c("Comunidad Autónoma","Porcentaje de matrimonios de distinto sexo","Porcentaje de matrimonios de hombres","Porcentaje de matrimonios de mujeres","Porcentaje de matrimonios del mismo sexo")
reactable(tpormatrCCAA,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#B5EAD7")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
#Calculemos ahora la tasa de nupcialidad, es decir, el cociente entre los matrimonios oficiados en un año y la población ese mismo año
#Hagámoslo en primer lugar por provincias
nupcial<-right_join(datosprovincias, poblacion)%>%mutate(TBNupDS=10000*DS / Población,TBNupHMS=10000*HMS / Población,TBNupMMS=10000*MMS / Población,TBNupMS=10000*(HMS+MMS) / Población)
tnupcial<-nupcial[,-c(3,4,5,6)]
colnames(tnupcial)<-c("Año","Provincia","Tasa de nupcialidad bruta de matrimonios de distinto sexo","Tasa de nupcialidad bruta de matrimonios de hombres","Tasa de nupcialidad bruta de matrimonios de mujeres","Tasa de nupcialidad bruta de matrimonios del mismo sexo")
reactable(tnupcial,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#E0BBE4")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
nupcialCCAA<-full_join(datosCCAA, poblacionCCAA)%>%transmute(Población=Población,AÑOCM=AÑOCM,TBNupDS=10000*DS / Población,TBNupHMS=10000*HMS / Población,TBNupMMS=10000*MMS / Población,TBNupMS=10000*(HMS+MMS) / Población)
tnupcialCCAA<-nupcialCCAA[,-2]
colnames(tnupcialCCAA)<-c("Comunidad Autónoma","Año","Tasa de nupcialidad bruta de matrimonios de distinto sexo","Tasa de nupcialidad bruta de matrimonios de hombres","Tasa de nupcialidad bruta de matrimonios de mujeres","Tasa de nupcialidad bruta de matrimonios del mismo sexo")
reactable(tnupcialCCAA,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#E0BBE4")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
View(tnupcialCCAA)
View(tnupcialCCAA)
View(tnupcial)
View(tnupcial)
View(nupcialCCAA)
View(nupcialCCAA)
nupcialCCAA<-full_join(datosCCAA, poblacionCCAA)%>%transmute(Población=Población,AÑOCM=AÑOCM,TBNupDS=10000*DS / Población,TBNupHMS=10000*HMS / Población,TBNupMMS=10000*MMS / Población,TBNupMS=10000*(HMS+MMS) / Población)
tnupcialCCAA<-nupcialCCAA[,-1]
View(tnupcialCCAA)
View(tnupcialCCAA)
#Repetimos el proceso para las comunidades autónomas
nupcialCCAA<-full_join(datosCCAA, poblacionCCAA)%>%transmute(Población=Población,AÑOCM=AÑOCM,TBNupDS=10000*DS / Población,TBNupHMS=10000*HMS / Población,TBNupMMS=10000*MMS / Población,TBNupMS=10000*(HMS+MMS) / Población)
View(nupcialCCAA)
View(nupcialCCAA)
#Repetimos el proceso para las comunidades autónomas
nupcialCCAA<-full_join(datosCCAA, poblacionCCAA)%>%transmute(Población=Población,AÑOCM=AÑOCM,TBNupDS=10000*DS / Población,TBNupHMS=10000*HMS / Población,TBNupMMS=10000*MMS / Población,TBNupMS=10000*(HMS+MMS) / Población)
full_join(datosCCAA, poblacionCCAA)
#Repetimos el proceso para las comunidades autónomas
nupcialCCAA<-full_join(datosCCAA, poblacionCCAA)%>%transmute(CCAA=CCAA,AÑOCM=AÑOCM,TBNupDS=10000*DS / Población,TBNupHMS=10000*HMS / Población,TBNupMMS=10000*MMS / Población,TBNupMS=10000*(HMS+MMS) / Población)
View(nupcialCCAA)
View(nupcialCCAA)
View(nupcialCCAA)
#Repetimos el proceso para las comunidades autónomas
nupcialCCAA<-full_join(datosCCAA, poblacionCCAA)%>%transmute(CCAA=CCAA,AÑOCM=AÑOCM,TBNupDS=10000*DS / Población,TBNupHMS=10000*HMS / Población,TBNupMMS=10000*MMS / Población,TBNupMS=10000*(HMS+MMS) / Población)
tnupcialCCAA<-nupcialCCAA
colnames(tnupcialCCAA)<-c("Comunidad Autónoma","Año","Tasa de nupcialidad bruta de matrimonios de distinto sexo","Tasa de nupcialidad bruta de matrimonios de hombres","Tasa de nupcialidad bruta de matrimonios de mujeres","Tasa de nupcialidad bruta de matrimonios del mismo sexo")
reactable(tnupcialCCAA,defaultColDef = colDef(
align = "center",
cell = function(value) format(value, nbig = 3),
minWidth = 70,
headerStyle = list(background = "#E0BBE4")),
filterable = TRUE,searchable=TRUE,highlight = TRUE,rownames = FALSE,compact=TRUE,pagination = FALSE)
source('~/MatrimoniosMismoSexo/MatrimoniosMismoSexo.R')
